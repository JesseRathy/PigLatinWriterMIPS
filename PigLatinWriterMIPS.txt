#Name: Jesse Rathy
#Student Number: 11166083
#Class: CMPT215
#Section: 01
#Date: Apr 5,2019
#Assignment: 5

.data

first: .asciiz "Program will wait until a key is pressed, then echo back the pressed key. Program will exit if ENTER is hit\n"
exit_prompt: .asciiz "\nENTER was hit. Ending program"

vowels: .asciiz "aeiou"


.text

main:
start_word:
jal read_char #read first char
move $a0,$v0 #move it for procedure calls
move $s0,$v0 #make a backup
jal check_vowel #check if first char a vowel
move $a0,$v0 #move t/f check
li $s7,1 #load 1 to compare check_vowel value (1 is true)
beq $a0,$s7,vowel_loop #if it is a vowel, go to the loop for vowel starts
beqz $a0,cons_loop #if it isn't, it must be a consonant or space/newline
move $a0,$s0 #get the backup
jal check_space #check if the value is a space
move $a0,$v0 #get the t/f check
beq $a0,$s7,start_word #if it is a space, just go back to the top
move $a0,$s0 #get the backup
jal check_newline #check if the char is a newline
move $a0,$v0 #get the t/f check
beq $a0,$s7,exit #if it is a newline, just exit out without doing anything extra
j start_word #if it is something else entirely (this should be impossible, safety loop), go back to start.

cons_loop:
#move $s1,$s0 #hold in first temp value
move $s1,$zero #placeholder for first
move $s2,$zero #placeholder for second
move $s3,$zero #placeholder for third

li $s6,0 #set number of 'eaten consanants' to 1
li $s5,3 #set max possible number of 'eaten consonants' +1
eat_loop:
beq $s5,$s6,out #if this is at the cap, get out
move $s3,$s2 #'funnel s2 value'
move $s2,$s1 #'funnel s1 value'
move $s1,$s0 #'funnel curr char value'
addi $s6,$s6,1 #create counter of eaten consonants, starting at 1 (we already ate one starting)
jal read_char
move $a0,$v0 #set new character
move $s0,$a0 #set backup
jal check_vowel #check if vowel
move $a0,$v0 #get t/f from check
beq $a0,$s7,out #if vowel, get out
move $a0,$s0  #get character again
jal check_y #check if y
move $a0,$v0 #get t/f from check
beq $a0,$s7,out #if y, get out
jal check_space #check if space
move $a0,$v0 #get t/f from check
beq $a0,$s7,new_cons #if space, start a new cons
move $a0,$s0 #get backup
jal check_newline #check if newline
move $a0,$v0 #get t/f from check
beq $a0,$s7,cons_end # if newline, end the program
j eat_loop #go back

out:
move $a0,$s0 #get character we wanted to print
jal print_char
jal read_char
move $a0,$v0 #move this to be used by other procedures
move $s0,$v0 #keep backup for use later
jal check_space #check if space
move $a0,$v0 #get t/f for space
beq $a0,$s7,new_cons #if it is, finish the consonant
move $a0,$s0 #get backup
jal check_newline #check if newline
move $a0,$v0 #get t/f for newline
beq $a0,$s7,cons_end#if it is, finish the program and the consonant
j out #go back otherwise

new_cons:
move $a0,$s3#get first letter
jal print_eaten #print it if it exists
move $a0,$s2 #get second letter
jal print_eaten #print it if it exists
move $a0,$s1 #get third letter
jal print_eaten #print it if it exists
jal add_ay #add 'ay' to the word
j start_word #start a new word

cons_end:
move $a0,$s3 #get first letter
jal print_eaten #print if it exists
move $a0,$s2 #get second letter
jal print_eaten #print if it exists
move $a0,$s1 #get third letter
jal print_eaten #print if it exists
jal add_ay #add 'ay' to the word
j exit #end the program

print_eaten:
#a0, possible consonant to be printed

addi $sp,$sp,-4 #allocate to stack
sw $ra,0($sp) #put return adress on stack
	#$a0 is the addition of 'way'.
beqz $a0,leave
jal print_char #run print_char given by $a0
leave:
lw $ra,0($sp) # get back return adress
addi $sp,$sp,4 #deallocate to stack
jr $ra #leave




vowel_loop:
move $a0,$s0 #get the backup (this is to prevent weird looking stuff)
jal print_char #print it
jal read_char #get new character
move $a0,$v0 #move this to be used by other procedures
move $s0,$v0 #keep backup for use later
jal check_space #check if the character is a space
move $a0,$v0 #get t/f from check
beq $a0,$s7,new_vowel #if it is a space, finish the vowel
move $a0,$s0 #get the backup
jal check_newline #check if character is a newline
move $a0,$v0 #get t/f from check
beq $a0,$s7,vowel_end #if it is a newline, finish the vowel and prog
move $a0,$s0 #get the backup
j vowel_loop #continue printing and getting characters otherwise

new_vowel:
jal add_way # add 'way' to the end of the word
j start_word #start a new word

vowel_end:
jal add_way # add 'way' to the end of the word
j exit #stop the program





print_char:
#$a0 character to print
	li $t0, 0xFFFF0008	# address of I/O transmitter register
	wait_print: lw $t1, 0($t0)	# get signal from transmitter I/O register. Has a 1 if it's ready to output, 0 if not
	beqz $t1, wait_print
	sb $a0, 4($t0) # Store output character in last byte of t0
	jr $ra


read_char:
#$v0 the read character
	li $t0, 0xFFFF0000	# address of I/O receiver register
	wait_read: lw $t1,0($t0) # get signal from receiver I/O register. If there's a 1, there's new input. If it's a 0, no new input
	beqz $t1,wait_read	# while signal from I/O is 0, there is no new input, so keep waiting
	lbu $v0,4($t0)	# read new character from last byte of t0
	jr $ra


add_way:
	addi $sp,$sp,-4 #allocate to stack
	sw $ra,0($sp) #put return adress on stack
		#$a0 is the addition of 'way'.
	li $a0,'w' #get 'w'
	jal print_char #run print_char proc for w
	li $a0,'a' #get 'a'
	jal print_char #run print_char proc for a
	li $a0,'y' #get 'y'
	jal print_char #run print_char proc for y
	li $a0,' ' #get 'y'
	jal print_char #run print_char proc for y
	lw $ra,0($sp) # get back return adress
	addi $sp,$sp,4 #deallocate to stack
	jr $ra #leave

add_ay:
	addi $sp,$sp,-4 #allocate to stack
	sw $ra,0($sp) #put return adress on stack
	#$a0 the addition of 'ay'.
	li $a0,'a' #get 'a'
	jal print_char #run print_char proc for a
	li $a0,'y' #get 'y'
	jal print_char #run print_char proc for y
	li $a0,' ' #get 'y'
	jal print_char #run print_char proc for y
	lw $ra,0($sp) # get back return adress
	addi $sp,$sp,4  #deallocate to stack
	jr $ra #leave

check_vowel:
		#$a0 is the word we're checking for a vowel
		#$t0 is the vowel array used to check
		#$t1 is the specific character we're comparing
	la $t0,vowels #get string of vowels
	loop:
	lbu $t1,0($t0) #get character from vowels string
	beqz $t1,is_false #if t1 is null character, we don't have a vowel
	beq $a0,$t1,is_true #if t1 is equal to the character we have, it is a vowel
	addi $t0,$t0,1 #add 1 to the address, go and get character
	j loop #loop back until one of the two occur
	is_true:
	li $v0,1 #true, set v0 to 1
	jr $ra #leave
	is_false:
	li $v0,0 #false, set v0 to 0
	jr $ra #leave

check_space:
#a0 the character we are checking
#t0 the space character
li $t0,32 #give ascii for space
beq $t0,$a0,is_space #check character given is space
li $v0,0 #if not, set to 0
jr $ra #leave
is_space:
li $v0,1 #if true, set to 1
jr $ra #leave


check_newline:
#a0 the character we are checking
#t0 the space character
li $t0,10 #give ascii for newline
beq $t0,$a0,is_newline #check character given is newline
li $v0,0 #if not,set to 0
jr $ra #leave
is_newline:
li $v0,1 #if true, set to 1
jr $ra #leave

check_y:
#a0 the character we are checking
#t0 the space character
li $t0,121 #give ascii for y
beq $t0,$a0,is_y #check character given is space
li $v0,0 #if not, set to 0
jr $ra #leave
is_y:
li $v0,1 #if true, set to 1
jr $ra #leave


exit:
li $v0,10 #set syscall to end prog
syscall  #do the thing
